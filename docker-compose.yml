services:
  frontend:
    container_name: exchange_frontend
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        NEXT_PUBLIC_API_URL: http://127.0.0.1:3005/api/v1
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:3005/api/v1
      - NODE_ENV=production
    ports:
      - "0.0.0.0:3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - exchange-net

  backend:
    container_name: exchange_backend
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    env_file:
      - apps/backend/.env
    ports:
      - "0.0.0.0:3005:3005"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -lc "
        cd /app/apps/backend &&
        npx prisma generate --schema prisma/schema.prisma &&
        (npx prisma migrate deploy --schema prisma/schema.prisma || npx prisma db push --schema prisma/schema.prisma) &&
        node dist/index.js
      "
    networks:
      - exchange-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3005/api/v1/supportedAssets" ]
      interval: 5s
      timeout: 5s
      retries: 5

  poller:
    container_name: exchange_poller
    build:
      context: .
      dockerfile: docker/Dockerfile.poller
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/exchange
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - exchange-net

  engine:
    container_name: exchange_engine
    build:
      context: .
      dockerfile: docker/Dockerfile.engine
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/exchange
      - REDIS_URL=redis://redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - exchange-net

  redis:
    container_name: exchange_redis
    image: redis:7.2.7-alpine3.21
    command: [ "redis-server" ]
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 2s
      timeout: 3s
      retries: 10
    networks:
      - exchange-net

  db:
    container_name: exchange_db
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=exchange
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d exchange" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - exchange-net

networks:
  exchange-net:


volumes:
  pgdata:
